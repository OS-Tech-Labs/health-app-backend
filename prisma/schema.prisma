// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @unique
  first_name     String
  last_name      String
  email_address  String
  contact_number String
  age            Int
  weight         Int
  allergies      Json
  description    String
  Treatments     Treatments[]
  Booking        Booking[]
  Chat           Chat[]
}

model Treatments {
  id        String  @id @default(uuid())
  treatment Json
  pateint   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

model Pharmacist {
  id               String         @id @default(uuid())
  medical_officer  MedicalOfficer @relation(fields: [medicalOfficerId], references: [id])
  medicalOfficerId String         @unique
  first_name       String
  last_name        String
  email_address    String
  contact_number   String
  pharmacy_drug    PharmacyDrug[]
}

model PharmacyDrug {
  pharmacist   Pharmacist @relation(fields: [pharmacistId], references: [id])
  pharmacistId String
  medicine     Medicine   @relation(fields: [medicineId], references: [id])
  medicineId   String

  @@id([pharmacistId, medicineId])
}

model Doctor {
  id               String           @id @default(uuid())
  medical_officer  MedicalOfficer   @relation(fields: [medicalOfficerId], references: [id])
  medicalOfficerId String           @unique
  first_name       String
  last_name        String
  email_address    String
  contact_number   String
  specialization   String
  Booking          Booking[]
  DoctorTimetable  DoctorTimetable?
}

model Booking {
  id          String   @id @default(uuid())
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  doctorId    String
  description String?
  date        DateTime
}

model User {
  id              String          @id @default(uuid())
  hash            String
  type            UserType
  username        String          @unique
  email_address   String          @unique
  medical_officer MedicalOfficer?
  Patient         Patient?
}

model MedicalOfficer {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @unique
  Chat       Chat[]
  Pharmacist Pharmacist?
  Doctor     Doctor?
}

model Chat {
  officer          MedicalOfficer @relation(fields: [medicalOfficerId], references: [id])
  medicalOfficerId String
  patient          Patient        @relation(fields: [patientId], references: [id])
  patientId        String
  disabled         Boolean

  @@id([medicalOfficerId, patientId])
}

model Medicine {
  id            String         @id @default(uuid())
  name          String
  pharmacy_drug PharmacyDrug[]
}

model DoctorTimetable {
  doctor     Doctor @relation(fields: [doctorId], references: [id])
  doctorId   String @unique
  weeklyPlan Json
}

enum UserType {
  GUEST
  PATIENT
  PHARMACIST
  DOCTOR
  ADMIN
}
